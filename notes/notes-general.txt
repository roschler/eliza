// Some general notes about the Eliza architecture.  Not official documentation.

LOGGING

Use elizaLogger.debug() to log messages that will only appear when the agent is launched in debug mode (i.e. - setting the DEBUG environment variable.  See the monorepo top level package.json file).

MESSAGE TEMPLATES

Each character JSON file has a "template:" field. This is where you put the template that is used to build the prompt to the LLM.  Any words surrounded by double braces (e.g. - {{recentMessages}}) is a substitution variable.  When you call composeContext(), the values found in the current state of the system needed byt he message template will be merged into that template to create the final LLM prompt.  Note, the current state data is found in the "state" variable passed to the action handler,

NOTE: If you omit the "template:" field the system will use the default message template, which attempts to combine the main elements of a character (e.g. - "bio", "lore", "examples", etc.) along with the recent message history to converse with the user.

CHARACTERS

The characters, if any, used by the current agent are specified with the --characters command line argument:

--characters="characters/trump.character.json, characters/sppicklicense.character.json"

You specify one or more comma-delimited relative paths to the character files you want your agent to use.  The first one in the list is the one that is initially active.  An agent runtime is created for each agent (see startAgents()).

Active character: Initially the first character, if any, listed in the --characters argument is active.  At least at the time that this wa written that is how the direct client configures things at startup.  If you look at most of the handlers in the code (e.g. - evaluators, providers, etc.) they are passed an instance of IAgentRuntime as the first parameter to the function.  That is the object that contains the active character.

CHARACTER TO AGENT RELATIONSHIP

When Eliza starts up, it creates an agent for each character specified in the --characters command line argument.  Therefore, the idea of switching characters actually means switching agents (AgentRuntime instances), and specifically, switching to the agent that was started with the desired character.
